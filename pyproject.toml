[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=62.3",
]

[project]
authors = [
  {name = "Nabu Casa, Inc.", email = "opensource@nabucasa.com"},
]
classifiers = [
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "acme==2.9.0",
    "aiohttp>=3.6.1",
    "atomicwrites-homeassistant==1.4.1",
    "attrs>=19.3",
    "ciso8601>=2.3.0",
    "cryptography>=42.0.0",
    "pycognito==2024.1.0",
    "snitun==0.36.2",
]
description = "Home Assistant cloud integration by Nabu Casa, Inc."
license = {text = "GPL v3"}
name = "hass-nabucasa"
readme = "README.md"
requires-python = ">=3.11"
version = "0.78.0"

[project.optional-dependencies]
test = [
    "codespell==2.2.6",
    "mypy==1.8.0",
    "pre-commit==3.6.2",
    "pre-commit-hooks==4.5.0",
    "pylint==3.1.0",
    "pytest-aiohttp==1.0.5",
    "pytest-timeout==2.2.0",
    "pytest==8.0.2",
    "ruff==0.2.2",
    "types_atomicwrites==1.4.5.1",
    "types_pyOpenSSL==24.0.0.20240228",
    "xmltodict==0.13.0",
    "safety==3.0.1",
    "syrupy==4.6.1",
    "tomli==2.0.1",
]

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.BASIC]
disable = [
  "abstract-method",
  "cyclic-import",
  "duplicate-code",
  "global-statement",
  "line-too-long",
  "locally-disabled",
  "missing-docstring",
  "not-context-manager",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "unused-argument",
]
extension-pkg-allow-list=[
  "ciso8601",
]
generated-members=[
  "botocore.errorfactory",
]
good-names= [
  "_",
  "cb",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "Run",
  "T",
]

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions=[
  "builtins.Exception",
]

[tool.pylint.MAIN]
ignore=[
  "tests_*",
]
reports=false

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
fix = true
line-length = 88
show-fixes = true
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "ANN101",
  "ANN401",
  "COM812",
  "PLR2004",
  "S101",
  "TRY003",
  "S303",

  "ARG001", # TEMPORARY DISABLED
  "ARG002", # TEMPORARY DISABLED
  "C901", # TEMPORARY DISABLED
  "D100", # TEMPORARY DISABLED
  "D103", # TEMPORARY DISABLED
  "D202", # TEMPORARY DISABLED
  "D205", # TEMPORARY DISABLED
  "D401", # TEMPORARY DISABLED
  "D403", # TEMPORARY DISABLED
  "DTZ003", # TEMPORARY DISABLED
  "DTZ005", # TEMPORARY DISABLED
  "E501", # TEMPORARY DISABLED
  "EM101", # TEMPORARY DISABLED
  "EM102", # TEMPORARY DISABLED
  "FBT001", # TEMPORARY DISABLED
  "FBT002", # TEMPORARY DISABLED
  "FBT003", # TEMPORARY DISABLED
  "I001", # TEMPORARY DISABLED
  "N817", # TEMPORARY DISABLED
  "N818", # TEMPORARY DISABLED
  "PERF401", # TEMPORARY DISABLED
  "PGH004", # TEMPORARY DISABLED
  "PLR0911", # TEMPORARY DISABLED
  "PLR0912", # TEMPORARY DISABLED
  "PLR0915", # TEMPORARY DISABLED
  "PTH112", # TEMPORARY DISABLED
  "RSE102", # TEMPORARY DISABLED
  "RUF006", # TEMPORARY DISABLED
  "RUF100", # TEMPORARY DISABLED
  "S311", # TEMPORARY DISABLED
  "SIM114", # TEMPORARY DISABLED
  "TCH002", # TEMPORARY DISABLED
  "TCH003", # TEMPORARY DISABLED
  "TRY300", # TEMPORARY DISABLED
  "TRY301", # TEMPORARY DISABLED
  "TRY400", # TEMPORARY DISABLED
  "UP006", # TEMPORARY DISABLED
]

select = [
  "ALL",
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = [
  "hass_nabucasa",
]

[tool.ruff.lint.pylint]
max-args = 15

[tool.setuptools]
include-package-data = true
platforms = [
  "any",
]
zip-safe = false

[tool.setuptools.package-data]
hass_nabucasa = [
  "py.typed",
]

[tool.setuptools.packages.find]
include = [
  "hass_nabucasa*",
]
